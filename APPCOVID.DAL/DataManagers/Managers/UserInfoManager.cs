using APPCOVID.DAL.DataManagers.Core;
using APPCOVID.DAL.DataManagers.Helper;
using APPCOVID.Entity.DTO;
using System.Collections.Generic;

namespace APP27062020.DAL.DataManagers
{
    public class UserInfoManager : DataManager<UserInfoDto>
    {
        #region Db Queries 
        private readonly string createTableQuery = $@"CREATE TABLE {DalCostants.TABLE_SCHEMA}.{DalCostants.USERINFO_TABLE}" +
           "(USERINFOID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL," +
            "USERID INT NOT NULL, " +
            "NAME VARCHAR(50) NOT NULL, " +
           "ADDRESS VARCHAR(150) NOT NULL, " +
           "PINCODE VARCHAR(15) NOT NULL, " +
           "PHONENO VARCHAR(15) NOT NULL, " +
           "EMAIL VARCHAR(150) NOT NULL, " +
           "MEMBERINFAMILY INT NOT NULL, " +
           "NOOFPERSONAFFECTEDINFAMILY INT NOT NULL, " +
           "WORKTYPE VARCHAR(50) NULL, " +
           "WORKLOCATION VARCHAR(150) NULL, " +
           "ORGANIZATIONNAME VARCHAR(20) NULL, " +
            "PRIMARY KEY (USERINFOID) );";

        private readonly string getAllDataQuery = $@"select * from {DalCostants.TABLE_SCHEMA}.{DalCostants.USERINFO_TABLE}";

        #endregion

        private DataManager<UserInfoDto> _dataManager;

        public UserInfoManager()
        {
            _dataManager = new DataManager<UserInfoDto>();
            if (!_dataManager.IsTableExistsinDb(DalCostants.TABLE_SCHEMA, DalCostants.USERINFO_TABLE))
            {
                _dataManager.CreateNewTable(createTableQuery, DalCostants.TABLE_SCHEMA, DalCostants.USERINFO_TABLE);
            }
        }
        public List<UserInfoDto> GetUserInfoData()
        {
            return _dataManager.GetData(getAllDataQuery);
        }

        public bool CreateUserInfo(UserInfoDto info)
        {
            string prepareQuery = $@"insert into {DalCostants.TABLE_SCHEMA}.{DalCostants.USERINFO_TABLE} (USERID, NAME,ADDRESS,PINCODE,PHONENO,EMAIL,MEMBERINFAMILY,NOOFPERSONAFFECTEDINFAMILY,WORKTYPE,WORKLOCATION,ORGANIZATIONNAME) 
                values('{info.USERID}','{info.NAME}','{info.ADDRESS}', '{info.PINCODE}', {info.PHONENO}, '{info.EMAIL}', {info.MEMBERINFAMILY},{info.NOOFPERSONAFFECTEDINFAMILY}, '{info.WORKTYPE}', '{info.WORKLOCATION}', '{info.ORGANIZATIONNAME}')";
            return _dataManager.InsertData(prepareQuery);
        }

        public List<UserInfoDto> CheckUserEmailExists(string email)
        {
            string prepareQuery = $@"select * from {DalCostants.TABLE_SCHEMA}.{DalCostants.USERINFO_TABLE} where EMAIL='" + email + "'";
            return _dataManager.GetData(prepareQuery);
        }

    }
}
